cmake_minimum_required(VERSION 3.4)
project(apriltag VERSION 3.3.0 LANGUAGES C CXX)

if(POLICY CMP0077)
    cmake_policy(SET CMP0077 NEW)
endif()
option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(BUILD_UTILS "Build utility library which provides additional useful functionality" ON)
option(BUILD_EXAMPLES "Build examples" ON)
option(ASAN "Use AddressSanitizer for debug builds to detect memory issues" OFF)

if (ASAN)
    set(ASAN_FLAGS "\
        -fsanitize=address \
        -fsanitize=bool \
        -fsanitize=bounds \
        -fsanitize=enum \
        -fsanitize=float-cast-overflow \
        -fsanitize=float-divide-by-zero \
        -fsanitize=nonnull-attribute \
        -fsanitize=returns-nonnull-attribute \
        -fsanitize=signed-integer-overflow \
        -fsanitize=undefined \
        -fsanitize=vla-bound \
        -fno-sanitize=alignment \
        -fsanitize=leak \
        -fsanitize=object-size \
    ")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${ASAN_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ASAN_FLAGS}")
endif()

# Set a default build type if none was specified
set(default_build_type "Release")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE  STRING "Choose the type of build." FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS  "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

include(GNUInstallDirs)

# Common Souce
# Build an OBJECT-library for the items shared between the core and util libs
add_library(${PROJECT_NAME}-shared-objects OBJECT)

target_sources(${PROJECT_NAME}-shared-objects PRIVATE
    src/common/image_u8.c
    src/common/image_u8x3.c
    src/common/pnm.c
    src/common/time_util.c
)

target_include_directories(${PROJECT_NAME}-shared-objects
    PRIVATE
    include/common
)

# Library (core functionality)
add_library(${PROJECT_NAME})

include(GenerateExportHeader)
generate_export_header(${PROJECT_NAME})

set(HEADERS_CORE_LIB
    apriltag.h
    apriltag_math.h
    apriltag_pose.h
    common/g2d.h
    common/homography.h
    common/matd.h
    common/postscript_utils.h
    common/pthreads_cross.h
    common/svd22.h
    common/timeprofile.h
    common/unionfind.h
    common/workerpool.h
    common/zmaxheap.h
)

target_sources(${PROJECT_NAME} PRIVATE
    src/apriltag.c 
    src/apriltag_pose.c 
    src/apriltag_quad_thresh.c
    src/common/g2d.c
    src/common/homography.c
    src/common/matd.c
    src/common/svd22.c
    src/common/unionfind.c
    src/common/workerpool.c
    src/common/zmaxheap.c
    $<TARGET_OBJECTS:${PROJECT_NAME}-shared-objects>
    ${HEADERS_CORE_LIB}
)

# add yet-to-be generated export header to list so it will be installed with other headers
list(APPEND HEADERS_CORE_LIB $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/${PROJECT_NAME}_export.h>)

if (MSVC)
    add_compile_definitions("_CRT_SECURE_NO_WARNINGS")
else()
    find_package(Threads REQUIRED)
    target_link_libraries(${PROJECT_NAME} PUBLIC Threads::Threads m)
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE ${PROJECT_NAME}-shared-objects)

set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 3 VERSION ${PROJECT_VERSION})
set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")
set_target_properties(${PROJECT_NAME} PROPERTIES 
    CMAKE_C_VISIBILITY_PRESET hidden 
    CMAKE_CXX_VISIBILITY_PRESET hidden
    CMAKE_VISIBILITY_INLINES_HIDDEN ON
    CMAKE_POSITION_INDEPENDENT_CODE ON
    CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS OFF
)

target_include_directories(${PROJECT_NAME} 
   PUBLIC
   $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/${PROJECT_NAME}
   PRIVATE
   $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>/include
   # include cmake-generated apriltag_export.h
   $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>
)

add_library(${PROJECT_NAME}-tags)

set(HEADERS_TAGS 
    tag16h5.h
    tag25h9.h
    tag36h10.h
    tag36h11.h
    tagCircle21h7.h
    tagCircle49h12.h
    tagCustom48h12.h
    tagStandard41h12.h
    tagStandard52h13.h
)

target_sources(${PROJECT_NAME}-tags PRIVATE
    src/tag16h5.c
    src/tag25h9.c
    src/tag36h10.c
    src/tag36h11.c
    src/tagCircle21h7.c
    src/tagCircle49h12.c
    src/tagCustom48h12.c
    src/tagStandard41h12.c
    src/tagStandard52h13.c
    ${HEADERS_TAGS}
)

target_link_libraries(${PROJECT_NAME}-tags PRIVATE ${PROJECT_NAME})

target_include_directories(${PROJECT_NAME}-tags PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/include
    # include cmake-generated apriltag_export.h
    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>
)

set_target_properties(${PROJECT_NAME}-tags PROPERTIES SOVERSION 3 VERSION ${PROJECT_VERSION})
set_target_properties(${PROJECT_NAME}-tags PROPERTIES DEBUG_POSTFIX "d")
set_target_properties(${PROJECT_NAME}-tags PROPERTIES 
    CMAKE_C_VISIBILITY_PRESET hidden 
    CMAKE_CXX_VISIBILITY_PRESET hidden
    CMAKE_VISIBILITY_INLINES_HIDDEN ON
    CMAKE_POSITION_INDEPENDENT_CODE ON
    CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS OFF
)

# install library header file hierarchy
foreach(HEADER ${HEADERS_CORE_LIB} ${HEADERS_COMMON} ${HEADERS_TAGS})
    string(REGEX MATCH "(.*)[/\\]" DIR ${HEADER})
    install(FILES ${HEADER} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/${DIR})
endforeach()

# export library
set(generated_dir ${CMAKE_CURRENT_BINARY_DIR}/generated)
set(version_config ${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake)
set(project_config ${generated_dir}/${PROJECT_NAME}Config.cmake)
set(targets_export_name ${PROJECT_NAME}Targets)
set(config_install_dir share/${PROJECT_NAME}/cmake)

# Include module with fuction 'write_basic_package_version_file'
include(CMakePackageConfigHelpers)

# Configure '<PROJECT-NAME>Config.cmake'
# Use variables:
#   * targets_export_name
#   * PROJECT_NAME
configure_package_config_file(
        "CMake/apriltagConfig.cmake.in"
        "${project_config}"
        INSTALL_DESTINATION "${config_install_dir}"
)

# Configure '<PROJECT-NAME>ConfigVersion.cmake'
# Note: PROJECT_VERSION is used as a VERSION
write_basic_package_version_file("${version_config}" COMPATIBILITY SameMajorVersion)

# install library
install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}-tags EXPORT ${targets_export_name}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(EXPORT ${targets_export_name}
    NAMESPACE apriltag::
    DESTINATION ${config_install_dir})

install(FILES ${project_config} ${version_config} DESTINATION ${config_install_dir})

export(TARGETS apriltag
    NAMESPACE apriltag::
    FILE ${generated_dir}/${targets_export_name}.cmake
)

# install pkgconfig file
configure_file(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)
install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
)

# utils-library (Used for Examples etc)
if(BUILD_UTILS OR BUILD_EXAMPLES)

    add_library(${PROJECT_NAME}-utils)

    set(HEADERS_UTIL
        common/getopt.h
        common/image_u8x4.h
        common/pam.h
        common/pjpeg.h
        common/string_util.h
        common/zhash.h
    )
    
    target_sources(${PROJECT_NAME}-utils PRIVATE
        src/common/string_util.c
        src/common/pjpeg-idct.c
        src/common/pjpeg.c
        src/common/image_u8x4.c
        src/common/getopt.c
        src/common/pam.c
        src/common/zhash.c
        src/common/zarray.c
        $<TARGET_OBJECTS:${PROJECT_NAME}-shared-objects>
        ${HEADERS_UTIL}
    )

    if (MSVC)
        add_compile_definitions("_CRT_SECURE_NO_WARNINGS")
    else()
        target_link_libraries(${PROJECT_NAME}-utils PUBLIC m)
    endif()

    target_link_libraries(${PROJECT_NAME}-utils PRIVATE ${PROJECT_NAME}-shared-objects)

    set_property(TARGET ${PROJECT_NAME}-utils PROPERTY PUBLIC_HEADER ${HEADERS_UTIL})

    set_target_properties(${PROJECT_NAME}-utils PROPERTIES SOVERSION 3 VERSION ${PROJECT_VERSION})
    set_target_properties(${PROJECT_NAME}-utils PROPERTIES DEBUG_POSTFIX "d")
    set_target_properties(${PROJECT_NAME}-utils PROPERTIES 
        CMAKE_C_VISIBILITY_PRESET default 
        CMAKE_CXX_VISIBILITY_PRESET default
        CMAKE_VISIBILITY_INLINES_HIDDEN OFF
        CMAKE_POSITION_INDEPENDENT_CODE ON
        CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON
    )

    # install utils-library
    install(TARGETS ${PROJECT_NAME}-utils
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/common
    )
endif()

# Python wrapper
include(CMakeDependentOption)
cmake_dependent_option(BUILD_PYTHON_WRAPPER "Builds Python wrapper" ON BUILD_SHARED_LIBS OFF)

if(BUILD_PYTHON_WRAPPER)
    SET(Python_ADDITIONAL_VERSIONS 3)
    find_package(PythonLibs)
    execute_process(COMMAND which python3 OUTPUT_QUIET RESULT_VARIABLE Python3_NOT_FOUND)
    execute_process(COMMAND python3 -c "import numpy" RESULT_VARIABLE Numpy_NOT_FOUND)
endif(BUILD_PYTHON_WRAPPER)

if (NOT Python3_NOT_FOUND AND NOT Numpy_NOT_FOUND AND PYTHONLIBS_FOUND AND BUILD_PYTHON_WRAPPER)
    # TODO deal with both python2/3
    execute_process(COMMAND python3 ${CMAKE_CURRENT_SOURCE_DIR}/python_build_flags.py OUTPUT_VARIABLE PY_OUT)
    set(PY_VARS CFLAGS LDFLAGS LINKER EXT_SUFFIX)
    cmake_parse_arguments(PY "" "${PY_VARS}" "" ${PY_OUT})
    separate_arguments(PY_CFLAGS)
    list(REMOVE_ITEM PY_CFLAGS -flto)
    separate_arguments(PY_LDFLAGS)

    foreach(X detect py_type)
    add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/apriltag_${X}.docstring.h
        COMMAND < ${CMAKE_CURRENT_SOURCE_DIR}/apriltag_${X}.docstring sed 's/\"/\\\\\"/g\; s/^/\"/\; s/$$/\\\\n\"/\;' > apriltag_${X}.docstring.h
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
    endforeach()

    add_custom_command(OUTPUT apriltag_pywrap.o
        COMMAND ${CMAKE_C_COMPILER} ${PY_CFLAGS} -I${PROJECT_BINARY_DIR} -c -o apriltag_pywrap.o ${CMAKE_CURRENT_SOURCE_DIR}/apriltag_pywrap.c
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/apriltag_pywrap.c ${PROJECT_BINARY_DIR}/apriltag_detect.docstring.h ${PROJECT_BINARY_DIR}/apriltag_py_type.docstring.h)
    add_custom_command(OUTPUT apriltag${PY_EXT_SUFFIX}
        COMMAND ${PY_LINKER} ${PY_LDFLAGS} -Wl,-rpath,lib apriltag_pywrap.o $<TARGET_FILE:apriltag> -o apriltag${PY_EXT_SUFFIX}
        DEPENDS ${PROJECT_NAME} apriltag_pywrap.o)
    add_custom_target(apriltag_python ALL
        DEPENDS apriltag${PY_EXT_SUFFIX})

execute_process(COMMAND python3 -m site --user-site OUTPUT_VARIABLE PY_DEST)
string(STRIP ${PY_DEST} PY_DEST)
install(FILES ${PROJECT_BINARY_DIR}/apriltag${PY_EXT_SUFFIX} DESTINATION ${PY_DEST})
endif (NOT Python3_NOT_FOUND AND NOT Numpy_NOT_FOUND AND PYTHONLIBS_FOUND AND BUILD_PYTHON_WRAPPER)

# Examples
if(BUILD_EXAMPLES)
    # apriltag_demo
    add_executable(apriltag_demo example/apriltag_demo.c)
    target_link_libraries(apriltag_demo PRIVATE ${PROJECT_NAME} ${PROJECT_NAME}-tags ${PROJECT_NAME}-utils )

    # opencv_demo
    set(_OpenCV_REQUIRED_COMPONENTS core imgproc videoio highgui)
    find_package(OpenCV COMPONENTS ${_OpenCV_REQUIRED_COMPONENTS} QUIET CONFIG)
    if(OpenCV_FOUND)
        # NB: contrib required for TickMeter in OpenCV 2.4. This is only required for 16.04 backwards compatibility and can be removed in the future.
        #     If we add it to the find_package initially, the demo won't build for newer OpenCV versions
        if(OpenCV_VERSION VERSION_LESS "3.0.0")
            list(APPEND _OpenCV_REQUIRED_COMPONENTS contrib)
            find_package(OpenCV COMPONENTS ${_OpenCV_REQUIRED_COMPONENTS} CONFIG)
        endif()

        add_executable(opencv_demo example/opencv_demo.cc)
        target_link_libraries(opencv_demo ${PROJECT_NAME} ${PROJECT_NAME}-utils ${PROJECT_NAME}-tags ${OpenCV_LIBRARIES})
        set_target_properties(opencv_demo PROPERTIES CXX_STANDARD 11)
        install(TARGETS opencv_demo RUNTIME DESTINATION bin)
    else()
        message(STATUS "OpenCV not found: Not building demo")
    endif(OpenCV_FOUND)

    # install example programs
    install(TARGETS apriltag_demo RUNTIME DESTINATION bin)
endif()